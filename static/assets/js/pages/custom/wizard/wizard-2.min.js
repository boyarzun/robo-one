"use strict"; var KTWizard2 = function () { var e, t, i, r = []; return { init: function () { e = KTUtil.getById("kt_wizard_v2"), t = KTUtil.getById("kt_form"), (i = new KTWizard(e, { startStep: 1, clickableSteps: !1 })).on("beforeNext", function (e) { i.stop(), r[e.getStep() - 1].validate().then(function (e) { "Valid" == e ? (i.goNext(), KTUtil.scrollTop()) : Swal.fire({ text: "Lo sentimos, parece que hay algunos errores, por favor intente nuevamente.", icon: "error", buttonsStyling: !1, confirmButtonText: "Ok, lo tengo!", customClass: { confirmButton: "btn font-weight-bold btn-light" } }).then(function () { KTUtil.scrollTop() }) }) }), i.on("change", function (e) { KTUtil.scrollTop() }), r.push(FormValidation.formValidation(t, { fields: { fname: { validators: { notEmpty: { message: "First name is required" } } }, lname: { validators: { notEmpty: { message: "Last Name is required" } } }, phone: { validators: { notEmpty: { message: "Phone is required" } } }, email: { validators: { notEmpty: { message: "Email is required" }, emailAddress: { message: "No es una dirección de correo electrónico válida" } } } }, plugins: { trigger: new FormValidation.plugins.Trigger, bootstrap: new FormValidation.plugins.Bootstrap } })), r.push(FormValidation.formValidation(t, { fields: { address1: { validators: { notEmpty: { message: "Address is required" } } }, postcode: { validators: { notEmpty: { message: "Postcode is required" } } }, city: { validators: { notEmpty: { message: "City is required" } } }, state: { validators: { notEmpty: { message: "State is required" } } }, country: { validators: { notEmpty: { message: "Country is required" } } } }, plugins: { trigger: new FormValidation.plugins.Trigger, bootstrap: new FormValidation.plugins.Bootstrap } })), r.push(FormValidation.formValidation(t, { fields: { delivery: { validators: { notEmpty: { message: "Delivery type is required" } } }, packaging: { validators: { notEmpty: { message: "Packaging type is required" } } }, preferreddelivery: { validators: { notEmpty: { message: "Preferred delivery window is required" } } } }, plugins: { trigger: new FormValidation.plugins.Trigger, bootstrap: new FormValidation.plugins.Bootstrap } })), r.push(FormValidation.formValidation(t, { fields: { locaddress1: { validators: { notEmpty: { message: "Address is required" } } }, locpostcode: { validators: { notEmpty: { message: "Postcode is required" } } }, loccity: { validators: { notEmpty: { message: "City is required" } } }, locstate: { validators: { notEmpty: { message: "State is required" } } }, loccountry: { validators: { notEmpty: { message: "Country is required" } } } }, plugins: { trigger: new FormValidation.plugins.Trigger, bootstrap: new FormValidation.plugins.Bootstrap } })), r.push(FormValidation.formValidation(t, { fields: { ccname: { validators: { notEmpty: { message: "Credit card name is required" } } }, ccnumber: { validators: { notEmpty: { message: "Credit card number is required" }, creditCard: { message: "The credit card number is not valid" } } }, ccmonth: { validators: { notEmpty: { message: "Credit card month is required" } } }, ccyear: { validators: { notEmpty: { message: "Credit card year is required" } } }, cccvv: { validators: { notEmpty: { message: "Credit card CVV is required" }, digits: { message: "The CVV value is not valid. Only numbers is allowed" } } } }, plugins: { trigger: new FormValidation.plugins.Trigger, bootstrap: new FormValidation.plugins.Bootstrap } })) } } }(); jQuery(document).ready(function () { KTWizard2.init() });